---
category: 編程
tags: [Make]
---

# makefile的規則

### 示例

```
目標文件 : 依赖的文件
        命令

app : main.o
	gcc main.o -o app

main.o : main.c
	gcc -c main.o -o main.o

```

&nbsp;

| &nbsp; &nbsp; &nbsp;目標文件 &nbsp; &nbsp; &nbsp;| &nbsp; &nbsp; &nbsp;依赖的文件&nbsp; &nbsp; &nbsp;| 命令 |
|:---:|:---:|:---|
|app | main.o |gcc main.o -o app|
|main.o|main.c |gcc main.c -o main.o|

# make 是如何工作

- make會在當前目錄下找名字叫“Makefile”或“makefile”的文件


## makefile 中的變量

- makefile中以 **$(objects)** 的方式來表達這個變量

```
示例
files = main.o fun1.o
app : $(files)
	gcc $(files) -o app
	
main.o : main.c
	gcc -c main.c -o main.o

fun1.o : fun1.c
	gcc -c fun1.c -o fun1.o
	
```

## 赋值方式

|&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 變量&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | 描述 |
|:---: | :--- |
| =   | 普通的賦值符，將右值賦給左值 **循環遞歸變量**|
| ?=  | 如果沒有初始化該變量，就給它賦上默認值，屬於條件賦值符|
| :=  | 在賦值的時候就確定了變量的值 **靜態方式**|
| +=  | 追加賦值符，在原變量的值上追加賦值|
| !=  | 右值為一條shell命令，shell命令的返回值賦給賦值符左邊的變量|


## 常用變量

|&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 變量&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | 描述 |
|:---: | :--- |
| ~  或者 ./ | 當前用戶的 **$HOME** 目錄|
| *  | 匹配所有 **非空字符** 串條件|
| %  | 匹配任何非空字符串如同 * 但只用於 **模式规则**|
| $@ | **目標文件**|
| $^ | 以空格分開的 **刪除重複** 依賴文件|
| $+ | 以空格分開的 **保留重複** 依賴文件|
| $< | 文件列表的 **第一個** 依賴文件|
| $% | 表示規則中的 **目標成員名** 的文件列表|
| $* | 一個文件列表中 **除文件擴展** 以外的部分|
| $? | 匹配所有 **更新的目标** 的文件列表|


### 模式规则示例

``` 
%.o: %.c
	$(CC) -c $< -o $@

模式規則描述了所有的.o文件的依賴文件為對應的.c文件，命令行中“$<”和“$@”是自動化變量，“$<” 表示規則中的第一個依賴文件，“$@” 表示規則中的目標文件
```


## 常用的兩個函數

| &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 函數&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | 描述 |
|:---: |:--- |
|wildcard|搜索指定文件，代表在當前目錄下搜索取所有的文件|
|patsubst|替換全部文件，按指定規則做替換|

### wildcard 示例

``` 
src = $(wildcard ./*.c)

函數執行結束後，src的值為目錄下搜索所有的.c文件
```

### patsubst 示例

``` 
obj = $(patsubst %.c, %.o, $(src))

函數執行結束後，obj的值為所有的.c文件的文件擴展名從 c 改為 o 
```


### 基本的腳本樣本

```
src = $(wildcard ./*.c)
obj = $(patsubst %.c, %.o, $(src))

target = app
CC = gcc

$(target): $(obj)
	$(CC) $(obj) -o $(target)

%.o: %.c
	$(CC) -c $< -o $@

.PHONY: clean  *(.PHONY 表達的依赖不是真實的文件, clean必須運行)*
clean:
	rm -rf $(obj) $(target)

```

